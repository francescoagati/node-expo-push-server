'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendPushNotificationAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Sends a push notification with the given options and data
 *
 */
var sendPushNotificationAsync = exports.sendPushNotificationAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(opts) {
    var exponentPushToken, message, body, response, json;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            exponentPushToken = opts.exponentPushToken;

            if (isExponentPushToken(exponentPushToken)) {
              _context.next = 3;
              break;
            }

            throw new Error('Missing `exponentPushToken`. Should be something like `ExponentPushToken[Re4MeUKjYWNd0FXSj8Eppi]` but instead got `' + exponentPushToken + '`');

          case 3:
            message = opts.message || undefined;
            body = (0, _extends3.default)({}, opts.data, {
              exponentPushToken: exponentPushToken,
              message: message
            });
            _context.next = 7;
            return (0, _nodeFetch2.default)(BASE_API_URL + '/notify', {
              method: 'POST',
              body: JSON.stringify(body),
              headers: new _nodeFetch.Headers({
                'Content-Type': 'application/json'
              })
            });

          case 7:
            response = _context.sent;

            if (!(response.status === 400)) {
              _context.next = 10;
              break;
            }

            throw new Error('Invalid Exponent Push Token: ' + exponentPushToken);

          case 10:
            if (!(response.status === 200)) {
              _context.next = 14;
              break;
            }

            return _context.abrupt('return', undefined);

          case 14:
            _context.next = 16;
            return response.json();

          case 16:
            json = _context.sent;
            throw new Error('Error sending push notification: ' + json.err);

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function sendPushNotificationAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.isExponentPushToken = isExponentPushToken;

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BASE_URL = 'https://exp.host/'; /**
                                     * exponent-server-sdk
                                     *
                                     * Use this if you are running Node on your server backend when you are working with Exponent
                                     * https://getexponent.com/
                                     *
                                     */

var BASE_API_URL = BASE_URL + '--/api';

/**
 * Returns `true` if the token is an Exponent push token
 *
 */
function isExponentPushToken(token) {
  return typeof token === 'string' && /^ExponentPushToken.+/.test(token);
}
//# sourceMappingURL=index.js.map